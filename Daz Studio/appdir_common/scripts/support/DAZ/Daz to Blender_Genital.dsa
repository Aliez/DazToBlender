// DAZ Studio version 4.12.0.86 filetype DAZ Script

(function(){
	
	var s_oMainNode = null;
	var s_sRoot = "";
	
	function export_all_genitals( oNode, oParentNode )
	{
		var aProperties = getElementProperties( oNode, true, true );
		var aMorphProps = new Array( aProperties.length );
		
		var oProp;
		var oOwner;
		var sLabel;
		
		for( var i = 0; i < aProperties.length; i += 1 ){
			oProp = aProperties[ i ];
			sLabel = oProp.getLabel();
			if( sLabel.startsWith( "CTRL" ) || sLabel.startsWith( "FBM" ) ){
				continue;
			}
			
			oOwner = oProp.getOwner();
			if( !oOwner.inherits( "DzMorph" ) ){
				continue;
			}
			
			if( oProp.isLocked() ){
				oProp.lock( false );
			}
			
			if( oProp.isOverridingControllers() ){
				oProp.setOverridingControllers( false );
			}
			
			aMorphProps[i] = [ i, oProp.getValue() ];
		}
		
		aMorphProps = aMorphProps.filter( Boolean );
		
		for( var i = 0; i < aMorphProps.length; i += 1 ){
			oProp = aProperties[ aMorphProps[i][0] ];
			oProp.setValue( 1 );
			
			sLabel = oProp.getLabel();
			export_obj( oParentNode, sLabel );
			
			oProp.setValue( aMorphProps[i][1] );
		}
	};


// --- START node_properties ----
	/**********************************************************************
	
		The following is derived from a work published as part of the
		Daz Script Documentation. This portion of the script, and/or any
		portion thereof, may only be used in accordance with the
		following license:
	
		Creative Commons Attribution 3.0 Unported (CC BY 3.0)
		- http://creativecommons.org/licenses/by/3.0
	
	**********************************************************************/
	// Source: http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/samples/properties/node_properties/start
 
 	// - Extraccted functions
 
	/*********************************************************************/
	// Array<DzProperty> : A function for getting a list of the properties in a group
	function getGroupProperties( oGroup, bTraverse, bRecurse )
	{
		// Declare an array to hold properties
		var aProperties = [];
		
		// If a group is not passed in
		if( !oGroup ){
			// We are done, return an empty array
			return aProperties;
		}
		
		// Get the number of proeprties in the group
		var nProperties = oGroup.getNumProperties();
		// Pre-size the properties array
		aProperties = new Array( nProperties );
		// Iterate over the properties, setting each element in the array
		for( var i = 0; i < nProperties; i += 1 ){
			// Assign the property to the position in the array
			aProperties[ i ] = oGroup.getProperty( i );
		}
		
		// If we are recursing
		if( bRecurse ){
			// Concatenate the properties array from child groups
			aProperties = aProperties.concat(
				getGroupProperties( oGroup.getFirstChild(), true, bRecurse ) );
		}
		
		// If we are traversing
		if( bTraverse ){
			// Concatenate the properties array from sibling groups
			aProperties = aProperties.concat(
				getGroupProperties( oGroup.getNextSibling(), bTraverse, bRecurse ) );
		}
 		
		// Return the array of properties
		return aProperties;
	};
	
	/*********************************************************************/
	// Array<DzProperty> : A function for getting the list properties for an element
	function getElementProperties( oElement, bTraverse, bRecurse )
	{
		// Get the property group tree for the element
		var oPropertyGroupTree = oElement.getPropertyGroups();
		
		// If the application version is 4.9.4.101 or newer and we want all properties
		if( App.version64 >= 0x0004000900040065 && bTraverse && bRecurse ){
			// Return the properties for the element
			return oPropertyGroupTree.getAllProperties();
		}
		
		// Get the first group in the tree
		var oPropertyGroup = oPropertyGroupTree.getFirstChild();
		// Return the properties for the element
		return getGroupProperties( oPropertyGroup, bTraverse, bRecurse );
	};
	
// --- END node_properties ----


// --- START export_obj_silent ----
	/**********************************************************************
	
		The following is derived from a work published as part of the
		Daz Script Documentation. This portion of the script, and/or any
		portion thereof, may only be used in accordance with the
		following license:
	
		Creative Commons Attribution 3.0 Unported (CC BY 3.0)
		- http://creativecommons.org/licenses/by/3.0
	
	**********************************************************************/
	// Source: http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/samples/file_io/export_obj_silent/start
	
	// - Minor changes for this specific use case
	
	function export_obj( oNode, sObjName )
	{
		// Get the export manager
		var oExportMgr = App.getExportMgr();
		// Define the class name the for Wavefront Object (*.obj) exporter
		var sClassName = "DzObjExporter";
		// Find the exporter
		var oExporter = oExportMgr.findExporterByClassName( sClassName );
		// If the exporter exists
		if( oExporter ){
			// Create a settings object
			var oSettings = new DzFileIOSettings();
			
			// Define whether or not to show options
			var bShowOptions = false;
			
			// Define whether or not to show options before prompting for a path;
			// requires 4.9.3.22 or later
			var bOptionsBeforeFile = (bShowOptions && App.version64 >= 0x0004000900030016);
			
			// Get the options for the exporter
			if( !oExporter.getOptions( oSettings, bShowOptions && bOptionsBeforeFile, "" ) ){
				// We're done...
				return;
			}
			
			oSettings.setStringValue( "Custom", "Custom" );
			// Set the scale to write the data
			oSettings.setFloatValue( "Scale", 1 );
			// Set the lateral axis to X
			oSettings.setStringValue( "LatAxis", "X" );
			// Set the vertical axis to Y
			oSettings.setStringValue( "VertAxis", "Y" );
			// Set the depth axis to Z
			oSettings.setStringValue( "DepthAxis", "Z" );
			// Do not invert the lateral axis
			oSettings.setBoolValue( "InvertLat", false );
			// Do not invert the vertical axis
			oSettings.setBoolValue( "InvertVert", false );
			// Do not invert the depth axis
			oSettings.setBoolValue( "InvertDepth", false );
			// Do not ignore the geometry of invisible nodes
			oSettings.setBoolValue( "IgnoreInvisible", true );
			// Do not weld seams between parent and child bones on legacy figures - deprecated
			oSettings.setBoolValue( "WeldSeams", false );
			// Do not remove vertices that are floating, connected to nothing - i.e. LOD
			oSettings.setBoolValue( "RemoveUnusedVerts", true );
			// Write vertex textures - UVs
			oSettings.setBoolValue( "WriteVT", false );
			// Do not write vertex normals
			oSettings.setBoolValue( "WriteVN", false );
			// Do not write object statements for each root node - i.e. figures, props
			oSettings.setBoolValue( "WriteO", false );
			
			// Write facet groups
			oSettings.setBoolValue( "WriteG", false );
			// Write facet groups according to whatever the geometry already has
			oSettings.setBoolValue( "GroupGeom", false );
			// Do not write facet groups according to the node it is associated with
			oSettings.setBoolValue( "GroupNodes", false );
			// Do not write facet groups according to surface groups
			oSettings.setBoolValue( "GroupSurfaces", false );
			// Do not write one facet group
			oSettings.setBoolValue( "GroupSingle", false );
			
			// Write surface groups
			oSettings.setBoolValue( "WriteUsemtl", false );
			
			// Do not write a material library
			oSettings.setBoolValue( "WriteMtllib", false );
			
			oSettings.setBoolValue( "OriginalMaps", false );
			// Do not collect texture maps
			oSettings.setBoolValue( "CollectMaps", false );
			// Do not convert texture maps
			oSettings.setBoolValue( "ConvertMaps", false );
			
			// If the version is 4.5.0.114 or newer
			if( App.version64 >= 0x0004000500000072 ){
				// Do not limit export to selection
				oSettings.setBoolValue( "SelectedOnly", false );
				// Do not limit export to the selected roots
				oSettings.setBoolValue( "SelectedRootsOnly", false );
				// Do not limit export to the primary selected root;
				// this setting overrides SelectedRootsOnly
				oSettings.setBoolValue( "PrimaryRootOnly", false );
				// Do not export items that are parented to the selection
				oSettings.setBoolValue( "IncludeParented", false );
				// Do not triangulate n-gons
				oSettings.setBoolValue( "TriangulateNgons", false );
			}
			
			// If the version is 4.9.3.22 or newer
			if( App.version64 >= 0x0004000900030016 ){
				// Do not collapse UVs Tiles
				oSettings.setBoolValue( "CollapseUVTiles", false );
				
				// Show individual settings in the dialog
				oSettings.setBoolValue( "ShowIndividualSettings", false );
			}
			
			// If the version is 4.10.0.73 or newer
			if( App.version64 >= 0x0004000a00000049 ){
				// Set floating point precision; default is 8
				oSettings.setIntValue( "FloatPrecision", 6 );
			}
			
			if( App.version64 >= 0x0004000b0000017f ){
				oSettings.setBoolValue( "WriteF", true );
			}
			
			// Define whether or not to show the options after prompting for a file
			oSettings.setIntValue( "RunSilent", (bShowOptions && !bOptionsBeforeFile ? 0 : 1) );
			
			// If we've got a node, construct the path using the
			// exporter's last path, the node's name, and the
			// exporter's extension...
			// Otherwise, just use the exporter's last path
			var sInitialPath = ( oNode ?
				String( "%1/%2.%3" )
					.arg( oExportMgr.getExportPath() )
					.arg( oNode.name )
					.arg( oExporter.getExtension() ) :
				oExportMgr.getExportPath() );
			
			var sPath = s_sRoot + "/";
			if( sObjName == "Eyelash" ){
				sPath += "EYELASH/EYELASH.obj";
			} else {
				sPath += sObjName + ".obj";
			}
			
			// If the user didn't cancel and the file doesn't already
			// exist, or the user wants to overwrite it
			if( sPath && MainWindow.checkExistingFile( sPath ) ){
				// Write the file using the options specified
				oExporter.writeFile( sPath, oSettings );
			}
			
			// Clean up; don't leak memory
			oExporter.deleteLater();
		// We didn't find an exporter with the class name we wanted
		} else {
			// Inform the user
			MessageBox.critical( qsTr("An exporter with the class name \"%1\" " +
				"could not be found.").arg( sClassName ),
				qsTr("Critical Error"), qsTr("&OK") );
		}
	};
	
// --- END export_obj_silent ----

	//Decide subdivison level Dialog.
	function getLevel()
	{
		var nLevel = -1;
		
		var wDlg = new DzDialog;
		wDlg.caption = "Select Subdiv Level";
		
		var wLyt = new DzVBoxLayout( wDlg );
		wLyt.autoAdd = true;
		
		var wOptBG = new DzVButtonGroup( wDlg );
		wOptBG.columns = 1;
		
		var aRBtns = new Array( 3 );
		for( var i = 0; i <= 2; i += 1 ){
			aRBtns[i] = new DzRadioButton( wOptBG );
			aRBtns[i].text = "SubDiv " + String( i );
			if( i == 0 ){
				aRBtns[i].checked = true;
			}
		}
		
		var wBtnGrp = new DzVButtonGroup( wDlg );
		wBtnGrp.columns = 2;
		
		var wOkBtn = new DzPushButton( wBtnGrp );
		wOkBtn.text = "Accept";
		
		var wNoBtn = new DzPushButton( wBtnGrp );
		wNoBtn.text = "Cancel";
		
		wDlg.setAcceptButton( wOkBtn );
		wDlg.setRejectButton( wNoBtn );
		
		if( wDlg.exec() ){
			for( var i = 0; i <= 3; i += 1 ){
				if( aRBtns[i].checked ){
					nLevel = i;
					break;
				}
			}
		}
		
		return nLevel;
	};
	
	function hideNotGenesis8()
	{
		var oNode;
		
		var nIdx = -1;
		var aNodes = Scene.getNodeList();
		for( var z = 0; z < 2; z += 1 ){
			for( var i = 0; i < aNodes.length; i += 1 ){
				oNode = aNodes[i];
				if( oNode.isRootNode() ){
					if( z == 0 &&
						(oNode.name == "Genesis8Female"
						|| oNode.name == "Genesis8Male")
					){
						nIdx = i;
						break;
					}
					
					if( z > 0 ){
						if( nIdx > -1 && i != nIdx ){
							oNode.setVisible( false );
						}
					}
				}
			}
		}
		
		if( nIdx > -1 && nIdx < aNodes.length ){
			return aNodes[nIdx];
		} else {
			return null;
		}
	};
	
	//set Subdivision Level
	function setSubdivAll( nLevel )
	{
		var bIsBody;
		var bIsGen;
		var nLev; // TODO : not used?
		var oNode;
		
		var aNodes = Scene.getNodeList();
		for( var i = 0; i < aNodes.length; i += 1 ){
			oNode = aNodes[i];
			bIsBody = oNode == s_oMainNode;
			bIsGen = !bIsBody && isGenital( oNode );
			nLev = 0;
			if( bIsBody || bIsGen ){
				nLev = nLevel;
			}
			
			setSubDivOne( oNode, nLevel );
		}
	};
	
	function setSubDivOne( oNode, nLevel )
	{
		var aProps = [ "lodlevel", "SubDIALevel" ];
		var oObject = oNode.getObject();
		if( oObject ){
			var oShape = oObject.getCurrentShape();
			if( oShape ){
				var oProp;
				for( var i = 0; i < aProps.length; i += 1 ){
					oProp = oShape.findProperty( aProps[i] );
					if( oProp ){
						if( oProp.isLocked() ){
							oProp.lock( false );
						}
						
						if( i == 0 && nLevel == 0 ){
							oProp.setValue( "Basic" );
						} else {
							oProp.setValue( nLevel );
						}
						
						if( nLevel > 0 ){
							oProp.lock( true );
						}
					}
				}
			}
		}
	};
	
	//find Eyelas and Genital
	function getChild( sName )
	{
		var oNode;
		
		var aNodes = Scene.getNodeList();
		for( var i = 0; i < aNodes.length; i += 1 ){
			oNode = aNodes[i];
			if( !oNode.isRootNode() ){
				if( oNode.getNodeParent() == s_oMainNode ){
					if( sName == "Eyelash" && oNode.name.indexOf( "aleEye" ) > 0 ){
						if( oNode.findNodeChild( 'hip', false ) != null ){
							return oNode;
						}
					} else if( sName == "Genital" ){
						print( oNode.name );
						if( isGenital( oNode ) ){
							return oNode;
						}
					}
				}
			}
		}
		
		return null;
	};
	
	//Make sure node is Genital
	function isGenital( oNode )
	{
		var aKeys = [ "genital", "malegen_" ];
		if( is_faced_mesh_single( oNode ) <= 0 ){
			return false;
		}
		
		var sName = oNode.name.toLowerCase();
		for( var i = 0; i < aKeys.length; i += 1 ){
			if( sName.length == 2 && sName == aKeys[i]
			|| sName.length > 2 && sName.indexOf( aKeys[i] ) >= 0 ){
				if( oNode.findNodeChild( 'hip', false ) ){
					return true;
				}
			}
		}
		
		return false;
	};
	
	//Delete previous Object
	function adjust_files()
	{
		var oDir = new DzDir( "" );
		
		var sDir =  oDir.homePath() + "/Documents/DTB";
		
		oDir.setPath( sDir );
		if( !oDir.exists() ){
			oDir.mkdir( sDir );
		}
		sDir += "/GEN";
		
		oDir.setPath( sDir );
		if( !oDir.exists() ){
			oDir.mkdir( sDir );
		} else {
			var aEntries = oDir.entryList();
			for( var i = 0; i < aEntries.length; i += 1 ){
				oDir.remove( aEntries[i] );
			}
		}
		
		s_sRoot = sDir;
		
		sDir += "/EYELASH"; // TODO : should this really be nested under /Gen?
		oDir.setPath( sDir );
		if( !oDir.exists() ){
			oDir.mkdir( sDir );
		} else {
			var aEntries = oDir.entryList();
			for( var i = 0; i < aEntries.length; i += 1 ){
				oDir.remove( aEntries[i] );
			}
		}
	};
	
	function is_faced_mesh_single( oNode )
	{
		if( !oNode ){
			return 0;
		}
		
		if( oNode.inherits( "DzBone" ) ){
			return 0;
		}
		
		var oObject = oNode.getObject();
		if( !oObject ){
			return 0;
		}
		
		var oShape = oObject.getCurrentShape();
		if( !oShape ){
			return 0;
		}
		
		var oMesh = oShape.getGeometry();
		if( !oMesh ){
			return 0;
		}
		
		//Mesh with ZERO faces;
		var nFacets = oMesh.getNumFacets();
		if( nFacets < 1 && oMesh.name.toLowerCase().indexOf( "eyebrow" ) < 0 ){
			return -1;
		}
		
		if( nFacets > 13000 ){
			return 3;
		}
		
		if( oNode.isRootNode() ){
			 return 0;
		}
		
		return 1;
	};
	
	function ctl_visible( oLashes, oGenital, bSee )
	{
		var oNode;
		var oChild;
		var aChildren;
		
		var aNodes = Scene.getNodeList();
		for( var i = 0; i < aNodes.length; i += 1 ){
			oNode = aNodes[i];
			if( oNode == s_oMainNode
			|| oNode.getNodeParent() == s_oMainNode ){
				//hide eyelash when export mainfiture and genital
				if( oNode == oLashes ){
					oNode.setVisible( bSee );
				//hide mainFigure and genital when export eyelash
				} else if( oNode == oGenital || oNode == s_oMainNode ){
					oNode.setVisible( !bSee );
				} else {
					aChildren = oNode.getNodeChildren( true );
					for( var j = 0; j < aChildren.length; j += 1 ){
						oChild = aChildren[j];
						if( is_faced_mesh_single( oChild ) != 0 ){
							oChild.setVisible( false );
						}
					}
					
					if( is_faced_mesh_single( oNode ) != 0 ){
						oNode.setVisible( false );
					}
				}
			}
		}
	};
	
	s_oMainNode = hideNotGenesis8();
	if( s_oMainNode ){
		adjust_files();
		var nLevel = getLevel();
		if( nLevel < 0 ){
			return;
		}
		
		setSubDivOne( s_oMainNode, nLevel );
		
		var oGenital = getChild( "Genital" );
		
		var oEyelash = getChild( "Eyelash" );
		
		if( oEyelash ){
			setSubDivOne( oEyelash, 0 );
			ctl_visible( oEyelash, oGenital, true );
			export_obj( oEyelash, "Eyelash" );
		}
		
		if( oGenital ){
			setSubDivOne( oGenital, nLevel );
			ctl_visible( oEyelash, oGenital, false );
			export_all_genitals( oGenital, s_oMainNode );
		}
	}
	
})();